" Use Vim settings, rather then Vi settings (much better!).
" Note: This must be first, because it changes other options as a side effect.
set nocompatible


" @reference    Special characters in Vim
"               https://sanctum.geek.nz/arabesque/special-characters-in-vim/
set encoding=utf-8


" @reference    Modeline magic
"               https://vim.fandom.com/wiki/Modeline_magic
"
" Disable modeline for security
set nomodeline


" Enable file type detection
filetype plugin on


" Indentation
set tabstop=4
set shiftwidth=4
set expandtab
set nosmarttab
" @reference    Indenting source code
"               https://vim.fandom.com/wiki/Indenting_source_code
"
" File-type based indentation
set nosmartindent
set nocindent
set autoindent
filetype plugin indent on


" Auto-format
"
" Where it makes sense, remove a comment leader when joining lines.
set formatoptions+=j
" When formatting text, recognize numbered lists.
" Note: that 'autoindent' must be set for this to work.
set formatoptions+=n
set formatoptions-=2


" Explicit set backspace for Insert mode
set backspace=indent,eol,start


" Comments
"
" @reference    Disable automatic comment insertion
"               https://vim.fandom.com/wiki/Disable_automatic_comment_insertion
"
" Disable automatic comment insertion for C/C++ single-line comments
autocmd FileType c,cpp setlocal comments-=:// comments+=f://


" Highlight Groups
" @reference    Highlight unwanted spaces
"               https://vim.fandom.com/wiki/Highlight_unwanted_spaces
" Note: Future colorscheme commands may clear all user-defined highlight groups.
highlight ExtraWhitespace ctermbg=red guibg=red


" @reference    Highlight unwanted spaces
"               https://vim.fandom.com/wiki/Highlight_unwanted_spaces
" Show trailing whitespace
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()


" Search
"
" Explicit set magic to recognize special characters when pattern matching.
set magic
" Show the next match while entering a search
set incsearch
" Highlighting search matches
set hlsearch
" When a bracket is inserted, briefly jump to the matching one.
set showmatch
" Explicit nogdefault: do not apply substitutions globally.
set nogdefault


" Explicit no colorcolumn by default
set colorcolumn=
" Explicit nocursorline
set nocursorline


" Improve syntax highlighting for a dark background(Vim)
set background=dark


" Status Bar
"
" Show line number, cursor position.
set ruler
" Display incomplete commands.
set showcmd
" Show editing mode
set showmode
" Explicit laststatus to show status line only if there are at least two windows
set laststatus=1


" @reference    Display line number
"               https://vim.fandom.com/wiki/Display_line_numbers
"
" Show the absolute number on the cursor line and relative numbers everywhere else
set number
set relativenumber


" @reference    Soft wrapping text
"               http://vimcasts.org/episodes/soft-wrapping-text/
"
" Wrap long lines to fit in the window
set wrap
" Preserve words
set linebreak
" Explicit nolist, no show space characters, at startup.
set nolist


" Set history
set history=10000


" @reference    Great wildmode/wildmenu and console mouse
"               https://vim.fandom.com/wiki/Great_wildmode/wildmenu_and_console_mouse
"
if has("wildmenu")
    " Show auto-complete menus in the command line via tab.
    set wildmenu
    set wildmode=longest:full,full
    " @reference    Vim filename completion
    "               https://sanctum.geek.nz/arabesque/vim-filename-completion/
    " Ignore certain filetypes
    " C/C++ binary files
    set wildignore+=*.a,*.o
    " Python binary files
    set wildignore+=*.pyc
    " Image files
    set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
    " Temp files
    set wildignore+=*~,*.swp,*.tmp
endif
" Enable full mouse support in the console.
set mouse=a


" Auto-completion
"
" Spell check
set spell spelllang=en_us
" @reference    Dictionary completions
"               https://vim.fandom.com/wiki/Dictionary_completions
"
" Enable Dictionary Completion
set dictionary+=/usr/share/dict/words

" @reference    Vim's autocomplete is excruciatingly slow
"               https://stackoverflow.com/questions/2169645/vims-autocomplete-is-excruciatingly-slow
"
" Remove included files from completion
set complete-=i

" @reference    Omni completion
"               https://vim.fandom.com/wiki/Omni_completion
" Set default Omni Completion to use the C completion
set omnifunc=syntaxcomplete#Complete
" @reference    C++ code completion
"               https://vim.fandom.com/wiki/C%2B%2B_code_completion
" Automatically open and close the popup menu / preview window
autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

" Explicit default completeopt without longest.
set completeopt=menu,preview


" Copy filename to clipboard
" Note: this requires Vim is compiled with +xterm_clipboard to support + or * register
if has('win32')
    " Convert slashes to backslashes for Windows.
    nmap <leader>cs :let @+=substitute(expand("%"), "/", "\\", "g")<CR>
    nmap <leader>cl :let @+=substitute(expand("%:p"), "/", "\\", "g")<CR>

    " This will copy the path in 8.3 short format, for DOS and Windows 9x
    nmap <leader>c8 :let @+=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
    nmap <leader>cs :let @+=expand("%")<CR>
    nmap <leader>cl :let @+=expand("%:p")<CR>
endif


" Easy Compile
"
" Auto-compile and run
autocmd FileType python nnoremap <F5> :w <bar> exec '!python '.shellescape('%')<CR>
autocmd FileType c nnoremap <F5> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' -g --std=c17 && ./'.shellescape('%:r')<CR>
autocmd FileType cpp nnoremap <F5> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' -g --std=c++17 && ./'.shellescape('%:r')<CR>
autocmd FileType c nnoremap <F6> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' -g --std=c17 -pthread && ./'.shellescape('%:r')<CR>
autocmd FileType cpp nnoremap <F6> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' -g --std=c++17 -pthread && ./'.shellescape('%:r')<CR>


" @reference    Insert in normal mode
"               https://vim.fandom.com/wiki/Insert_in_normal_mode
"
" Map the <space> key to insert a space after the cursor in normal mode
nnoremap <space> a<space><ESC>


" Tabs
"
" @reference    Using tab pages
"               https://vim.fandom.com/wiki/Using_tab_pages
"
" tabfind: look in the directory containing the current file (.),
"   then the current directory (empty text between two commas),
"   then each directory under the current directory ('**').
set path=.,,**
" Always show tab line
set showtabline=2


" Plug-ins
"
" cscope
"
" @reference    CSCOPE settings for vim
"               http://cscope.sourceforge.net/cscope_maps.vim
"
" This tests to see if vim was configured with the '--enable-cscope' option
if has("cscope")
    " @reference    Cscope Issue: duplicate cscope database not added
    "               http://thoughtsolo.blogspot.com/2014/02/cscope-issue-duplicate-cscope-database.html
    "
    " Disable cscope error message for adding a database
    set nocscopeverbose

    " Use only ctag for 'ctrl-]', ':tag', and 'vim -t'
    set nocscopetag

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    set cscopeverbose
endif


" netrw
"
" @reference    Vim: you don't need NERDtree or (maybe) netrw
"               https://shapeshed.com/vim-netrw/
"
" Tree style view
let g:netrw_liststyle = 3
" To remove directory banner
let g:netrw_banner = 0


" GDB
"
" @reference    Debugging in Vim
"               https://www.dannyadam.com/blog/2019/05/debugging-in-vim/
packadd termdebug


" @reference    Project Specific .vimrc Files
"               https://andrew.stwrt.ca/posts/project-specific-vimrc/
"
" To enable per-project configuration files.
set exrc
" To disable unsafe commands in your project-specific .vimrc files
" This will prevent :autocmd, shell and write commands from being run inside
" project-specific .vimrc files unless theyâ€™re owned by you.
" Note: This line should be kept at the end
set secure


" @reference    Local .vimrc files
"               https://sanctum.geek.nz/arabesque/local-vimrc-files/
if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif
