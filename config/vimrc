" Turn on plug-in
filetype plugin on

" Indentation
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

" Show the next match while entering a search
set incsearch
" Highlighting search matches
set hlsearch

" Improve syntax highlighting for a dark background
"set background=dark

" Copy filename to clipboard
if has('win32')
    " Convert slashes to backslashes for Windows.
    nmap ,cs :let @+=substitute(expand("%"), "/", "\\", "g")<CR>
    nmap ,cl :let @+=substitute(expand("%:p"), "/", "\\", "g")<CR>

    " This will copy the path in 8.3 short format, for DOS and Windows 9x
    nmap ,c8 :let @+=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
    nmap ,cs :let @+=expand("%")<CR>
    nmap ,cl :let @+=expand("%:p")<CR>
endif

" Spell check
set spell spelllang=en_us

" Auto-compile and run
autocmd filetype python nnoremap <F5> :w <bar> exec '!python '.shellescape('%')<CR>
autocmd filetype c nnoremap <F5> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' -g && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <F5> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' -g -std=c++11 && ./'.shellescape('%:r')<CR>
autocmd filetype c nnoremap <F6> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' -g -pthread && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <F6> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' -g -std=c++11 -pthread && ./'.shellescape('%:r')<CR>

" Tabs
" tabfind: look in the directory containing the current file (.), then the current directory (empty text between two commas), then each directory under the current directory ('**').
"   reference: http://vim.wikia.com/wiki/Using_tab_pages
set path=.,,**
"
" Show tab number in your tab line
"   reference: http://vim.wikia.com/wiki/Show_tab_number_in_your_tab_line
set showtabline=2 " always show tabs in gvim, but not vim
" set up tab labels with tab number, buffer name, number of windows
function! GuiTabLabel()
    let label = ''
    let bufnrlist = tabpagebuflist(v:lnum)
    " Add '+' if one of the buffers in the tab page is modified
    for bufnr in bufnrlist
        if getbufvar(bufnr, "&modified")
            let label = '+'
            break
        endif
    endfor
    " Append the tab number
    let label .= v:lnum.': '
    " Append the buffer name
    let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
    if name == ''
        " give a name to no-name documents
        if &buftype=='quickfix'
            let name = '[Quickfix List]'
        else
            let name = '[No Name]'
        endif
    else
        " get only the file name
        let name = fnamemodify(name,":t")
    endif
    let label .= name
    " Append the number of windows in the tab page
    let wincount = tabpagewinnr(v:lnum, '$')
    return label . '  [' . wincount . ']'
endfunction
set guitablabel=%{GuiTabLabel()}
"
" set up tab tooltips with every buffer name
"   reference: http://vim.wikia.com/wiki/Show_tab_number_in_your_tab_line
function! GuiTabToolTip()
    let tip = ''
    let bufnrlist = tabpagebuflist(v:lnum)
    for bufnr in bufnrlist
        " separate buffer entries
        if tip!=''
            let tip .= " \n "
        endif
        " Add name of buffer
        let name=bufname(bufnr)
        if name == ''
            " give a name to no name documents
            if getbufvar(bufnr,'&buftype')=='quickfix'
                let name = '[Quickfix List]'
            else
                let name = '[No Name]'
            endif
        endif
        let tip.=name
        " add modified/modifiable flags
        if getbufvar(bufnr, "&modified")
            let tip .= ' [+]'
        endif
        if getbufvar(bufnr, "&modifiable")==0
            let tip .= ' [-]'
        endif
    endfor
    return tip
endfunction
set guitabtooltip=%{GuiTabToolTip()}
